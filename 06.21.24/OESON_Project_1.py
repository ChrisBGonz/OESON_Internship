# -*- coding: utf-8 -*-
"""OESON Project 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mNzwzxZalxK8N_QqO1dISfLajBXQNRQO

# Statistical Analysis and Visualization with Python
## This project aims to perform statistical analysis and data visualization using Python. You will generate a synthetic dataset, perform descriptive and inferential statistics, and visualize the results using Matplotlib and Seaborn. Your final submission should include a presentation highlighting your findings, visualizations, and interpretations.
"""

#Import Necessary Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind

"""### Task 1: Data Generation
#### The file "sample_dataset.csv" was created using Numpy. It contains 1000 samples with the following information:

####Age, Height (cm), Weight (kg), Gender, and Income.
"""

#Set random seed for reproducibility
np.random.seed(0)

#Number of samples
n = 1000

#Generate data for each column and round to whole numbers
age = np.round(np.random.normal(loc = 35, scale = 10, size = n)).astype(int)
height = np.round(np.random.normal(loc = 170, scale = 15, size = n)).astype(int)
weight = np.round(np.random.normal(loc = 70, scale = 10, size = n)).astype(int)
gender = np.random.choice(['Male', 'Female'], size = n, p = [0.5, 0.5])
income = np.round(np.random.normal(loc = 50000, scale = 15000, size = n))

#Create sample numbers from 1 to 1000
sample_numbers = np.arange(1, n+1)

#Create a DataFrame
data = pd.DataFrame({
    'Sample_Number': sample_numbers,
    'Age': age,
    'Height': height,
    'Weight': weight,
    'Gender': gender,
    'Income': income
})

#Save the DataFrame to a CSV file
data.to_csv('sample_dataset.csv', index = False)

#Load the Dataset
data = pd.read_csv('sample_dataset.csv')
data.head(10)

"""### Task 2: Descriptive Statistics


"""

#Calculate Mean, Median, Standard Deviation, and Variance
print('Basic Statistics for Age')
print('Mean:', data['Age'].mean())
print('Median:', data['Age'].median())
print('Standard Deviation:', data['Age'].std())
print('Variance:', data['Age'].var())

print('\nBasic Statistics for Height')
print('Mean:', data['Height'].mean())
print('Median:', data['Height'].median())
print('Standard Deviation:', data['Height'].std())
print('Variance:', data['Height'].var())

print('\nBasic Statistics for Weight')
print('Mean:', data['Weight'].mean())
print('Median:', data['Weight'].median())
print('Standard Deviation:', data['Weight'].std())
print('Variance:', data['Weight'].var())

print('\nBasic Statistics for Income')
print('Mean:', data['Income'].mean())
print('Median:', data['Income'].median())
print('Standard Deviation:', data['Income'].std())
print('Variance:', data['Income'].var())

print('\nBasic Statistic for Gender')
print('Mode:', data['Gender'].mode())

"""### Task 3: Data Visualization"""

#Histograms for dataset

#Histogram for Age
plt.figure(figsize = (8,6))
plt.hist(data['Age'], bins = 10, color = 'purple', label = 'Number of People')
plt.xlabel('Age')
plt.ylabel('Number of people')
plt.title('Age Distribution of Sample Data')
plt.legend()
plt.show()

#Histogram for Height
plt.figure(figsize = (8,6))
plt.hist(data['Height'], bins = 10, color = 'blue', label = 'Number of People')
plt.xlabel('Height (cm)')
plt.ylabel('Number of people')
plt.title('Height Distribution of Sample Data')
plt.legend()
plt.show()

#Histogram for Weight
plt.figure(figsize = (8,6))
plt.hist(data['Weight'], bins = 10, color = 'orange', label = 'Number of People')
plt.xlabel('Weight (kg)')
plt.ylabel('Number of people')
plt.title('Weight Distribution of Sample Data')
plt.legend()
plt.show()

#Histogram for Income
plt.figure(figsize = (8,6))
plt.hist(data['Income'], bins = 10, color = 'green', label = 'Number of People')
plt.xlabel('Income')
plt.ylabel('Number of people')
plt.title('Income Distribution of Sample Data')
plt.legend()
plt.show()

#KDE plots for dataset

#KDE Plot for Age
sns.histplot(data['Age'], kde = True, color = 'purple')
plt.title('KDE Plot for Age')
plt.show()

#KDE Plot for Height
sns.histplot(data['Height'], kde = True, color = 'blue')
plt.title('KDE Plot for Height')
plt.show()

#KDE Plot for Weight
sns.histplot(data['Weight'], kde = True, color = 'orange')
plt.title('KDE Plot for Weight')
plt.show()

#KDE Plot for Income
sns.histplot(data['Income'], kde = True, color = 'green')
plt.title('KDE Plot for Income')
plt.show()

#Boxplots for Dataset

#Boxplot for Age
sns.boxplot(x = data['Age'], color = 'purple')
plt.title('Boxplot for Age')
plt.show()

#Boxplot for Height
sns.boxplot(x = data['Height'], color = 'blue')
plt.title('Boxplot for Height')
plt.show()

#Boxplot for Weight
sns.boxplot(x = data['Weight'], color = 'orange')
plt.title('Boxplot for Weight')
plt.show()

#Boxplot for Income
sns.boxplot(x = data['Income'], color = 'green')
plt.title('Boxplot for Income')
plt.show()

"""### Task 4: Correlation Analysis

"""

#Correlation Matrix for Dataset
corr_matrix = data[['Age', 'Height', 'Weight', 'Income']].corr()

#Heatmap of Correlation Matrix
plt.figure(figsize = (10, 6))
sns.heatmap(corr_matrix, annot = True, cmap = 'coolwarm', linewidths = 0.5)
plt.title('Correlation Matrix')
plt.show()

"""### Task 5: Inferential Statistics

"""

#T-test for significant difference in Income between Male and Female

"""
- H0 (Null Hypothesis): There is no significant difference in income between Male and Female.
- H1 (Alternate Hypothesis): There is a significant difference in income between Male and Female.
Note: If the p-value is less than 0.05, reject H0. Otherwise, it is accepted.
"""
df = pd.DataFrame(data)

#Income between Male and Female:
male_Income = df[df["Gender"] == "Male"]["Income"]
female_Income = df[df["Gender"] == "Female"]["Income"]

#Perform Independent Sample T-Test
t_stat = ttest_ind(male_Income, female_Income)
print(t_stat)
